package part_1.medium.bitwiseoperator;

public class GetSum371 {

    public int getSum(int a, int b) {
        /**
         * 分析题意：做两数加法运算还不能用加号，我们就可以尝试用位运算来代替加法运算。
         * 首先我们知道第一个数是a，第二个数是b。那么 a ^ b 表示的就是a和b做加法运算
         * 只是没有考虑进位，也就是说他们的二进制数，如果在相同位置碰到两个1，异或结果
         * 为0，和 1 + 1 进位后这一位为0一致，0 + 1 在异或中等于1也没有问题。最大的
         * 问题就是进位我们如何解决呢，我们这里的结果方案是 让 (a & b) << 1，验证一下
         * 如果a和b二进制的当前相同位置上都为1，那么 1 & 1 = 1，然后左移一位
         * 就变成了10，符合二进制数加法规律1 + 1 = 10，
         * 如果是 1 & 0 = 0，或者 0 & 0 = 0 向左进位为 00，即没有进位，也符合二进制
         * 加法规律，故验证成功
         * 我们可以用递归来写本题，
         * 递归让 a = a ^ b 表示不考虑进位的加法运算，b = (a & b) << 1 记录进位
         * 这样在下一趟递归时，整个加法运算就完整了，那么如何才能结束递归呢？
         * 我们分析下可能可以让递归终止的原因，(a & b) << 1 每执行一次，最右边会多一个 0，
         * 那么继续递归，进位最右边的 0 会慢慢增多，最后进位会变为 0，即b = 0时递归终止。
         */
        return b == 0 ? a : getSum(a ^ b, (a & b) << 1);
    }

}
