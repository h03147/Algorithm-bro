package part_1.easy.bitwiseoperator;

public class IsPowerOfTwo231 {

    public boolean isPowerOfTwo(int n) {
        /*
         * 分析题意：题目要求找到 n 是否为 2 的 幂次方，从位运算角度分析，一个数如果是2的幂次方，那么他的二进制表示
         * 形式中，只有可能刚好有1个1可能出现在任意位置上，这样我们转换成十进制数就是 1 * 2^n（n表示当前位向右数后面
         * 有多少位，二进制转十进制的算法），当然 如果是2的幂次就要排除负数，所有的负数不是2的幂次方。
         */

        // // 方法一 n 大于零，且只有一个1调用工具类统计其二进制1的个数是否恰好为1
        // return n > 0 && Integer.bitCount(n) == 1;

        // 方法二 用 (n & (n - 1)) 因为n恰好二进制数形式只有一个1，无论在哪一位上，那么 n - 1 一定向下降位数，恰好
        // 和 n 的二进制数的1的位置相邻错开了，故与运算结果为0
        return n > 0 && (n & (n - 1)) == 0;
    }

}
